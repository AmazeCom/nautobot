# Generated by Django 3.2.16 on 2022-12-23 02:48

from django.db import migrations


def create_region_and_site_location_types(apps, schema_editor):
    Region = apps.get_model("dcim", "region")
    Site = apps.get_model("dcim", "site")
    LocationType = apps.get_model("dcim", "locationtype")
    Location = apps.get_model("dcim", "location")

    # Site and Region instances both exist
    if Site.objects.exists() and Region.objects.exists():
        region_lt = LocationType.objects.create(name="Region", nestable=True)
        # Breadth First Query
        for region in Region.objects.with_tree_fields().extra(order_by=["__tree.tree_depth", "__tree.tree_ordering"]):
            Location.objects.create(
                location_type=region_lt,
                name=region.name,
                description=region.description,
                parent=Location.objects.get(name=region.parent.name, location_type=region_lt)
                if region.parent
                else None,
            )
        site_lt = LocationType.objects.create(name="Site", parent=LocationType.objects.get(name="Region"))
        Location.objects.create(
            location_type=region_lt,
            name="Global Region",
            description=region.description,
        )
        for site in Site.objects.filter(region__isnull=True):
            Location.objects.create(
                name=site.name,
                location_type=site_lt,
                parent=Location.objects.get(location_type=region_lt, name="Global Region"),
                tenant=site.tenant,
                facility=site.facility,
                asn=site.asn,
                time_zone=site.time_zone,
                description=site.description,
                physical_address=site.physical_address,
                shipping_address=site.shipping_address,
                latitude=site.latitude,
                longitude=site.longitude,
                contact_name=site.contact_name,
                contact_phone=site.contact_phone,
                contact_email=site.contact_email,
                comments=site.comments,
                status=site.status,
                tags=site.tags,
            )
        for site in Site.objects.filter(region__isnull=False):
            Location.objects.create(
                name=site.name,
                location_type=site_lt,
                parent=Location.objects.get(location_type=region_lt, name=site.region.name),
                tenant=site.tenant,
                facility=site.facility,
                asn=site.asn,
                time_zone=site.time_zone,
                description=site.description,
                physical_address=site.physical_address,
                shipping_address=site.shipping_address,
                latitude=site.latitude,
                longitude=site.longitude,
                contact_name=site.contact_name,
                contact_phone=site.contact_phone,
                contact_email=site.contact_email,
                comments=site.comments,
                status=site.status,
                tags=site.tags,
            )
        for location_type in LocationType.objects.filter(parent__isnull=True).exclude(name="Region"):
            location_type.parent = site_lt
            location_type.save()
        for location in Location.objects.filter(site__isnull=False):
            location.parent = Location.objects.get(name=location.site.name, location_type=site_lt)
            location.save()
    # Only Region instances exist
    elif Region.objects.exists():
        LocationType.objects.create(name="Region", nestable=True)
        region_lt = LocationType.objects.create(name="Region", nestable=True)
        for region in Region.objects.with_tree_fields().extra(order_by=["__tree.tree_depth", "__tree.tree_ordering"]):
            Location.objects.create(
                location_type=region_lt,
                name=region.name,
                description=region.description,
                parent=Location.objects.get(name=region.parent.name, location_type=region_lt)
                if region.parent
                else None,
            )
    # Only Site instances exist
    elif Site.objects.exists():
        region_lt = LocationType.objects.create(name="Region", nestable=True)
        site_lt = LocationType.objects.create(name="Site", parent=LocationType.objects.get(name="Region"))
        Location.objects.create(
            location_type=region_lt,
            name="Global Region",
            description=region.description,
        )
        for site in Site.objects.filter(region__isnull=True):
            Location.objects.create(
                name=site.name,
                location_type=site_lt,
                parent=Location.objects.get(location_type=region_lt, name="Global Region"),
                tenant=site.tenant,
                facility=site.facility,
                asn=site.asn,
                time_zone=site.time_zone,
                description=site.description,
                physical_address=site.physical_address,
                shipping_address=site.shipping_address,
                latitude=site.latitude,
                longitude=site.longitude,
                contact_name=site.contact_name,
                contact_phone=site.contact_phone,
                contact_email=site.contact_email,
                comments=site.comments,
                status=site.status,
                tags=site.tags,
            )
        for location_type in LocationType.objects.filter(parent__isnull=True).exclude(name="Region"):
            location_type.parent = site_lt
            location_type.save()
        for location in Location.objects.filter(site__isnull=False):
            location.parent = Location.objects.get(name=location.site.name, location_type=site_lt)
            location.save()


class Migration(migrations.Migration):

    dependencies = [
        ("dcim", "0022_change_tree_manager_on_tree_models"),
    ]

    operations = [
        migrations.RunPython(
            code=create_region_and_site_location_types,
            reverse_code=migrations.operations.special.RunPython.noop,
        ),
    ]
